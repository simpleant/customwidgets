package com.antwei.customwidgets;import android.content.Context;import android.content.res.TypedArray;import android.util.AttributeSet;import android.view.View;import android.view.ViewGroup;/** * Created by ant on 15-4-20. */public class FlowLayout extends ViewGroup {    private int mHorizontalSpacing;    private int mVerticalSpacing;    int lineHeight = 0;    public FlowLayout(Context context) {        super(context);    }    public FlowLayout(Context context, AttributeSet attrs) {        super(context, attrs);        TypedArray typedArray = context.obtainStyledAttributes(attrs, R.styleable.FlowLayout);        try {            mHorizontalSpacing = typedArray.getDimensionPixelSize(R.styleable.FlowLayout_horizontalSpacing, 0);            mVerticalSpacing = typedArray.getDimensionPixelSize(R.styleable.FlowLayout_verticalSpacing, 0);        }finally {            typedArray.recycle();        }    }    @Override    protected void onLayout(boolean changed, int l, int t, int r, int b) {        final int count = getChildCount();        final int width = r - l;        int xpos = getPaddingLeft();        int ypos = getPaddingTop();        for(int i=0;i<count; i++){            final View child = getChildAt(i);            if(child.getVisibility() != GONE){                final int childW = child.getMeasuredWidth();                final int childH = child.getMeasuredHeight();                if(xpos + childW > width){                    xpos = getPaddingLeft();                    ypos += lineHeight;                }                child.layout(xpos,ypos, xpos+childW, ypos+childH);                xpos += childW+ mHorizontalSpacing;            }        }    }    @Override    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {        super.onMeasure(widthMeasureSpec, heightMeasureSpec);//        assert(MeasureSpec.getMode(widthMeasureSpec) != MeasureSpec.UNSPECIFIED);        final int width = MeasureSpec.getSize(widthMeasureSpec) - getPaddingLeft() - getPaddingRight();        int height = MeasureSpec.getSize(heightMeasureSpec) - getPaddingTop() - getPaddingBottom();        final int count = getChildCount();        int lineHeight = 0;        int xpos = getPaddingLeft();        int ypos = getPaddingTop();        int childHeightMeasureSpec;        if(MeasureSpec.getMode(heightMeasureSpec) == MeasureSpec.AT_MOST){            childHeightMeasureSpec = MeasureSpec.makeMeasureSpec(height, MeasureSpec.AT_MOST);        }else {            childHeightMeasureSpec = MeasureSpec.makeMeasureSpec(0, MeasureSpec.UNSPECIFIED);        }        for(int i=0;i<count; i++){            final View child = getChildAt(i);            if(child.getVisibility() != GONE){                child.measure(MeasureSpec.makeMeasureSpec(width, MeasureSpec.AT_MOST), childHeightMeasureSpec);                final int childW = child.getMeasuredWidth();                lineHeight = Math.max(lineHeight, child.getMeasuredHeight() + mVerticalSpacing);                if(xpos+childW > width){                    xpos = getPaddingLeft();                    ypos += lineHeight;                }                xpos += childW + mHorizontalSpacing;            }        }        this.lineHeight = lineHeight;        if(MeasureSpec.getMode(heightMeasureSpec) == MeasureSpec.UNSPECIFIED){            height = ypos + lineHeight;        }else if(MeasureSpec.getMode(heightMeasureSpec) == MeasureSpec.AT_MOST){            if(ypos + lineHeight < height){                height = ypos + lineHeight;            }        }        setMeasuredDimension(width, height);    }    @Override    protected boolean checkLayoutParams(LayoutParams p) {        return p instanceof LayoutParams;    }    @Override    protected LayoutParams generateDefaultLayoutParams() {        return new LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT);    }    @Override    public LayoutParams generateLayoutParams(AttributeSet attrs) {        return new LayoutParams(getContext(), attrs);    }    @Override    protected LayoutParams generateLayoutParams(LayoutParams p) {        return new LayoutParams(p.width, p.height);    }}